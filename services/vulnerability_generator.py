import random
import os

VULNERABILITY_TYPES = [
    'sql_injection',
    'xss',
    'csrf',
    'insecure_direct_object_reference',
    'broken_authentication',
    'sensitive_data_exposure',
]

def generate_vulnerability():
    vulnerability_type = random.choice(VULNERABILITY_TYPES)
    
    if vulnerability_type == 'sql_injection':
        return generate_sql_injection()
    elif vulnerability_type == 'xss':
        return generate_xss()
    elif vulnerability_type == 'csrf':
        return generate_csrf()
    elif vulnerability_type == 'insecure_direct_object_reference':
        return generate_idor()
    elif vulnerability_type == 'broken_authentication':
        return generate_broken_auth()
    elif vulnerability_type == 'sensitive_data_exposure':
        return generate_data_exposure()

def generate_sql_injection():
    vulnerable_code = """
    @bp.route('/search')
    def search():
        query = request.args.get('q')
        results = db.engine.execute(f"SELECT * FROM products WHERE name LIKE '%{query}%'")
        return render_template('search_results.html', results=results)
    """
    return ('routes/shop.py', vulnerable_code)

def generate_xss():
    vulnerable_code = """
    @bp.route('/profile')
    @login_required
    def profile():
        return render_template('profile.html', user_input=request.args.get('name', ''))
    """
    return ('routes/auth.py', vulnerable_code)

def generate_csrf():
    vulnerable_code = """
    @bp.route('/change_password', methods=['POST'])
    @login_required
    def change_password():
        new_password = request.form['new_password']
        current_user.set_password(new_password)
        db.session.commit()
        return redirect(url_for('auth.profile'))
    """
    return ('routes/auth.py', vulnerable_code)

def generate_idor():
    vulnerable_code = """
    @bp.route('/order/<int:order_id>')
    @login_required
    def order_detail(order_id):
        order = Order.query.get(order_id)
        return render_template('order_detail.html', order=order)
    """
    return ('routes/shop.py', vulnerable_code)

def generate_broken_auth():
    vulnerable_code = """
    @bp.route('/login', methods=['POST'])
    def login():
        username = request.form['username']
        password = request.form['password']
        user = User.query.filter_by(username=username).first()
        if user and user.password == password:
            login_user(user)
            return redirect(url_for('shop.index'))
        return redirect(url_for('auth.login'))
    """
    return ('routes/auth.py', vulnerable_code)

def generate_data_exposure():
    vulnerable_code = """
    @bp.route('/api/users')
    def get_users():
        users = User.query.all()
        return jsonify([{'id': user.id, 'username': user.username, 'email': user.email} for user in users])
    """
    return ('routes/admin.py', vulnerable_code)

if __name__ == '__main__':
    print(generate_vulnerability())
